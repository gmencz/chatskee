Update(Role("user"), {
  membership: [{
    resource: Collection("users"),
    predicate: Query(Lambda("ref", Equals(Select(["data", "type"], Get(CurrentToken()), false), "access")))
  }],
  privileges: [{
    resource: Collection("server_users"),
    actions: {
      read: Query(Lambda("ref", Equals(Select(["data", "userRef"], Get(Var("ref"))), CurrentIdentity())))
    }
  }, {
    resource: Collection("servers"),
    actions: {
      read: Query(Lambda("serverRef", Any(Select(["data"], Map(Paginate(Match(Index("server_users_by_user"), CurrentIdentity())), Lambda("ref", Equals(Var("serverRef"), Select(["data", "serverRef"], Get(Var("ref"))))))))))
    }
  }, {
    resource: Collection("users"),
    actions: {
      read: true
    }
  }, {
    resource: Collection("channels"),
    actions: {
      read: Query(Lambda("channelRef", Let([{
        subscribers: Select(["data", "subscribers"], Get(Var("channelRef")), [])
      }], Any(Map(Var("subscribers"), Lambda("subscriberRef", Equals(CurrentIdentity(), Var("subscriberRef")))))))),
      write: Query(Lambda(["oldData", "newData"], Let([{
        subscribers: Select(["data", "subscribers"], Var("newData"), [])
      }], Any(Map(Var("subscribers"), Lambda("subscriberRef", Equals(CurrentIdentity(), Var("subscriberRef")))))))),
      create: Query(Lambda("newChannel", Let([{
        subscribers: Select(["data", "subscribers"], Var("newChannel"))
      }, {
        isCurrentUserSubscribed: Any(Map(Var("subscribers"), Lambda("subscriber", Equals(CurrentIdentity(), Var("subscriber")))))
      }, {
        areAllSubscribersFriends: true
      }], And(Var("isCurrentUserSubscribed"), Var("areAllSubscribersFriends")))))
    }
  }, {
    resource: Index("dms_by_user1"),
    actions: {
      read: Query(Lambda("dmRef", Equals(CurrentIdentity(), Select([0], Var("dmRef")))))
    }
  }, {
    resource: Index("dms_by_user2"),
    actions: {
      read: Query(Lambda("dmRef", Equals(CurrentIdentity(), Select([0], Var("dmRef")))))
    }
  }, {
    resource: Collection("dms"),
    actions: {
      read: Query(Lambda("dmRef", Let([{
        user1: Select(["data", "user1Ref"], Get(Var("dmRef")))
      }, {
        user2: Select(["data", "user2Ref"], Get(Var("dmRef")))
      }], Or(Equals(CurrentIdentity(), Var("user1")), Equals(CurrentIdentity(), Var("user2")))))),
      create: Query(Lambda("newDm", Let([{
        dmUser: Select(["data", "user2Ref"], Var("newDm"))
      }, {
        isDmUserAFriend: Exists(Union(Match(Index("friends_by_user1_and_user2"), [CurrentIdentity(), Var("dmUser")]), Match(Index("friends_by_user1_and_user2"), [Var("dmUser"), CurrentIdentity()])))
      }], Var("isDmUserAFriend"))))
    }
  }, {
    resource: Index("server_users_by_user"),
    actions: {
      read: Query(Lambda("userAndServerRefs", Equals(CurrentIdentity(), Select([0], Var("userAndServerRefs")))))
    }
  }, {
    resource: Index("messages_by_channel"),
    actions: {
      read: Query(Lambda("terms", Let([{
        channelSubscribers: Select(["data", "subscribers"], Get(Select([0], Var("terms"))), [])
      }], Any(Map(Var("channelSubscribers"), Lambda("subscriber", Equals(CurrentIdentity(), Var("subscriber"))))))))
    }
  }, {
    resource: Collection("messages"),
    actions: {
      read: Query(Lambda("message", Let([{
        channel: Get(Select(["data", "channelRef"], Get(Var("message"))))
      }, {
        channelSubscribers: Select(["data", "subscribers"], Var("channel"), [])
      }], Any(Map(Var("channelSubscribers"), Lambda("subscriber", Equals(CurrentIdentity(), Var("subscriber")))))))),
      create: Query(Lambda("newMessage", Let([{
        channel: Get(Select(["data", "channelRef"], Var("newMessage")))
      }, {
        channelSubscribers: Select(["data", "subscribers"], Var("channel"))
      }], Any(Map(Var("channelSubscribers"), Lambda("subscriber", Equals(CurrentIdentity(), Var("subscriber"))))))))
    }
  }, {
    resource: Collection("user_friends"),
    actions: {
      read: Query(Lambda("ref", Let([{
        doc: Get(Var("ref"))
      }, {
        user1Ref: Select(["data", "user1Ref"], Var("doc"))
      }, {
        user2Ref: Select(["data", "user2Ref"], Var("doc"))
      }], Or(Equals(CurrentIdentity(), Var("user1Ref")), Equals(CurrentIdentity(), Var("user2Ref")))))),
      create: Query(Lambda("newFriend", Let([{
        user1Ref: Select(["data", "user1Ref"], Var("newFriend"))
      }, {
        user2Ref: Select(["data", "user2Ref"], Var("newFriend"))
      }], Or(Equals(CurrentIdentity(), Var("user1Ref")), Equals(CurrentIdentity(), Var("user2Ref"))))))
    }
  }, {
    resource: Index("friends_by_user1"),
    actions: {
      read: Query(Lambda("terms", Equals(CurrentIdentity(), Select([0], Var("terms")))))
    }
  }, {
    resource: Index("friends_by_user2"),
    actions: {
      read: Query(Lambda("terms", Equals(CurrentIdentity(), Select([0], Var("terms")))))
    }
  }, {
    resource: Index("users_by_email"),
    actions: {
      read: true
    }
  }, {
    resource: Collection("user_friend_requests"),
    actions: {
      read: Query(Lambda("friendRequestRef", Let([{
        friendRequestDoc: Get(Var("friendRequestRef"))
      }, {
        user: Select(["data", "userRef"], Var("friendRequestDoc"))
      }, {
        friend: Select(["data", "friendRef"], Var("friendRequestDoc"))
      }], Or(Equals(CurrentIdentity(), Var("user")), Equals(CurrentIdentity(), Var("friend")))))),
      create: Query(Lambda("newFriendRequest", Let([{
        user: Select(["data", "userRef"], Var("newFriendRequest"))
      }, {
        friend: Select(["data", "friendRef"], Var("newFriendRequest"))
      }], Or(Equals(CurrentIdentity(), Var("user")), Equals(CurrentIdentity(), Var("friend")))))),
      delete: Query(Lambda("friendRequestRef", Let([{
        friendRequestDoc: Get(Var("friendRequestRef"))
      }, {
        user: Select(["data", "userRef"], Var("friendRequestDoc"))
      }, {
        friend: Select(["data", "friendRef"], Var("friendRequestDoc"))
      }], Or(Equals(CurrentIdentity(), Var("user")), Equals(CurrentIdentity(), Var("friend"))))))
    }
  }, {
    resource: Index("friend_requests_by_friend"),
    actions: {
      read: Query(Lambda("terms", Let([{
        friendRequest: Match(Index("friend_requests_by_friend"), Select([0], Var("terms")))
      }], If(Exists(Var("friendRequest")), Let([{
        friendRequestDoc: Get(Var("friendRequest"))
      }, {
        friendRef: Select(["data", "friendRef"], Var("friendRequestDoc"))
      }], Equals(CurrentIdentity(), Var("friendRef"))), true))))
    }
  }, {
    resource: Index("friend_requests_by_user"),
    actions: {
      read: Query(Lambda("terms", Equals(CurrentIdentity(), Select([0], Var("terms")))))
    }
  }, {
    resource: Index("friends_by_user1_and_user2"),
    actions: {
      read: Query(Lambda("terms", Let([{
        user1: Select([0], Var("terms"))
      }, {
        user2: Select([1], Var("terms"))
      }], Or(Equals(CurrentIdentity(), Var("user1")), Equals(CurrentIdentity(), Var("user2"))))))
    }
  }, {
    resource: Index("friend_requests_by_friend_and_user"),
    actions: {
      read: Query(Lambda("terms", Let([{
        friend: Select([0], Var("terms"))
      }, {
        user: Select([1], Var("terms"))
      }], Or(Equals(CurrentIdentity(), Var("friend")), Equals(CurrentIdentity(), Var("user"))))))
    }
  }, {
    resource: Index("channels_by_subscribers"),
    actions: {
      read: true
    }
  }, {
    resource: Index("dms_by_channel"),
    actions: {
      read: true
    }
  }],
  data: null
})