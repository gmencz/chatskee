CreateRole({
  name: 'user',
  membership: [
    {
      resource: Collection('users'),
      predicate: Query(
        Lambda('ref',
          Equals(Select(['data', 'type'], Get(CurrentToken()), false), 'access')
        )
      )
    }
  ],
  privileges: [
    { 
      resource: Collection('server_users'),
      actions: {
        read: Query(
          Lambda("ref",
            Equals(
              Select(['data', 'userRef'], Get(Var('ref'))),
              CurrentIdentity()
            )
          )
        )
      }
    },
    { 
      resource: Collection('servers'), 
      actions: { 
        read: Query(
          Lambda(
            'serverRef',
            Any(
              Select(['data'], Map(
                Paginate(
                  Match(Index('server_users_by_user'), CurrentIdentity())
                ),
                Lambda(
                  'ref',
                  Equals(
                    Var('serverRef'),
                    Select(['data', 'serverRef'], Get(Var('ref')))
                  )
                )
              ))
            )
          )
        ) 
      }
    },
    {
      resource: Collection('users'),
      actions: {
        read: true
      }
    },
    {
      resource: Collection('channels'),
      actions: {
        read: Query(
          Lambda(
            "channelRef",
            Let(
              {
                subscribers: Select(['data', 'subscribers'], Get(Var('channelRef')), [])
              },
              Any(
                Map(
                  Var('subscribers'),
                  Lambda(
                    'subscriberRef',
                    Equals(
                      CurrentIdentity(),
                      Var('subscriberRef')
                    )
                  )
                )
              )
            )
          )
        ),
        write: Query((oldData, newData) => 
          Let(
            {
              subscribers: Select(['data', 'subscribers'], newData, [])
            },
            Any(
              Map(
                Var('subscribers'),
                Lambda(
                  'subscriberRef',
                  Equals(
                    CurrentIdentity(),
                    Var('subscriberRef')
                  )
                )
              )
            )
          )
        )
      }
    },
    {
      resource: Index('dms_by_user1'),
      actions: {
        read: Query(
          Lambda("dmRef",
            Equals(
              CurrentIdentity(),
              Select([0], Var("dmRef"))
            )
          )
        )
      }
    },
    {
      resource: Index('dms_by_user2'),
      actions: {
        read: Query(
          Lambda("dmRef",
            Equals(
              CurrentIdentity(),
              Select([0], Var("dmRef"))
            )
          )
        )
      }
    },
    {
      resource: Collection('dms'),
      actions: {
        read: Query(
          Lambda(
            'dmRef',
            Let(
              {
                user1: Select(['data', 'user1Ref'], Get(Var('dmRef'))),
                user2: Select(['data', 'user2Ref'], Get(Var('dmRef'))),
              },
              Or(
                Equals(CurrentIdentity(), Var('user1')),
                Equals(CurrentIdentity(), Var('user2')),
              )
            )
          )
        )
      }
    },
    {
      resource: Index('server_users_by_user'),
      actions: {
        read: Query(
          Lambda(
            'userAndServerRefs',
            Equals(
              CurrentIdentity(),
              Select([0], Var('userAndServerRefs'))
            )
          )
        )
      }
    },
    {
      resource: Index('messages_by_channel'),
      actions: {
        read: Query(
          Lambda(
            'terms',
            Let(
              {
                channelSubscribers: Select(['data', 'subscribers'], Get(Select([0], Var('terms'))), []),
              },
              Any(
                Map(
                  Var('channelSubscribers'),
                  Lambda(
                    'subscriber',
                    Equals(
                      CurrentIdentity(),
                      Var('subscriber')
                    )
                  )
                )
              )
            )
          )
        )
      }
    },
    {
      resource: Collection('messages'),
      actions: {
        read: Query(
          Lambda(
            'message',
            Let(
              {
                channel: Get(Select(['data', 'channelRef'], Get(Var('message')))),
                channelSubscribers: Select(['data', 'subscribers'], Var('channel'), [])
              },
              Any(
                Map(
                  Var('channelSubscribers'),
                  Lambda(
                    'subscriber',
                    Equals(
                      CurrentIdentity(),
                      Var('subscriber')
                    )
                  )
                )
              )
            )
          )
        ),
        create: Query(
          Lambda(
            'newMessage',
            Let(
              {
                channel: Get(Select(['data', 'channelRef'], Var('newMessage'))),
                channelSubscribers: Select(['data', 'subscribers'], Var('channel'))
              },
              Any(
                Map(
                  Var('channelSubscribers'),
                  Lambda(
                    'subscriber',
                    Equals(
                      CurrentIdentity(),
                      Var('subscriber')
                    )
                  )
                )
              )
            )
          )
        ),
      }
    },
    {
      resource: Collection('user_friends'),
      actions: {
        read: Query(
          ref =>
          Let(
            {
              doc: Get(ref),
              user1Ref: Select(['data', 'user1Ref'], Var('doc')),
              user2Ref: Select(['data', 'user2Ref'], Var('doc')),
            },
            Or(
              Equals(CurrentIdentity(), Var('user1Ref')),
              Equals(CurrentIdentity(), Var('user2Ref'))
            )
          )
        ),
        create: Query(
          newFriend =>
          Let(
            {
              user1Ref: Select(['data', 'user1Ref'], newFriend),
              user2Ref: Select(['data', 'user2Ref'], newFriend),
            },
            Or(
              Equals(CurrentIdentity(), Var('user1Ref')),
              Equals(CurrentIdentity(), Var('user2Ref')),
            )
          )
        )
      }
    },
    {
      resource: Index('friends_by_user1'),
      actions: {
        read: Query(
          terms =>
          Equals(
            CurrentIdentity(),
            Select([0], terms)
          )
        )
      }
    },
    {
      resource: Index('friends_by_user2'),
      actions: {
        read: Query(
          terms =>
          Equals(
            CurrentIdentity(),
            Select([0], terms)
          )
        )
      }
    },
    {
      resource: Index('users_by_email'),
      actions: {
        read: true
      }
    },
    {
      resource: Collection('user_friend_requests'),
      actions: {
        read: Query(
          friendRequestRef =>
          Let(
            {
              friendRequestDoc: Get(friendRequestRef),
              user: Select(['data', 'userRef'], Var('friendRequestDoc')),
              friend: Select(['data', 'friendRef'], Var('friendRequestDoc')),
            },
            Or(
              Equals(CurrentIdentity(), Var('user')),
              Equals(CurrentIdentity(), Var('friend')),
            )
          )
        ),
        create: Query(
          newFriendRequest =>
          Let(
            {
              user: Select(['data', 'userRef'], newFriendRequest),
              friend: Select(['data', 'friendRef'], newFriendRequest),
            },
            Or(
              Equals(CurrentIdentity(), Var('user')),
              Equals(CurrentIdentity(), Var('friend')),
            )
          )
        ),
        delete: Query(
          friendRequestRef =>
          Let(
            {
              friendRequestDoc: Get(friendRequestRef),
              user: Select(['data', 'userRef'], Var('friendRequestDoc')),
              friend: Select(['data', 'friendRef'], Var('friendRequestDoc')),
            },
            Or(
              Equals(CurrentIdentity(), Var('user')),
              Equals(CurrentIdentity(), Var('friend')),
            )
          )
        ),
      }
    },
    {
      resource: Index('friend_requests_by_friend'),
      actions: {
        read: Query(
          terms =>
          Let(
            {
              friendRequest: Match(
                Index('friend_requests_by_friend'),
                Select([0], terms)
              )
            },
            If(
              Exists(Var('friendRequest')),
              Let(
                {
                  friendRequestDoc: Get(Var('friendRequest')),
                  friendRef: Select(['data', 'friendRef'], Var('friendRequestDoc')),
                },
                Equals(
                  CurrentIdentity(),
                  Var('friendRef')
                ),
              ),
              true
            )
          )
        )
      }
    },
    {
      resource: Index('friend_requests_by_user'),
      actions: {
        read: Query(
          terms =>
          Equals(
            CurrentIdentity(),
            Select([0], terms)
          )
        )
      }
    },
    {
      resource: Index('friends_by_user_and_friend'),
      actions: {
        read: Query(
          terms =>
          Let(
            {
              user: Select([0], terms),
              friend: Select([1], terms)
            },
            Or(
              Equals(CurrentIdentity(), Var('user')),
              Equals(CurrentIdentity(), Var('friend'))
            )
          )
        )
      }
    },
    {
      resource: Index('friend_requests_by_friend_and_user'),
      actions: {
        read: Query(
          terms =>
          Let(
            {
              friend: Select([0], terms),
              user: Select([1], terms)
            },
            Or(
              Equals(CurrentIdentity(), Var('friend')),
              Equals(CurrentIdentity(), Var('user'))
            )
          )
        )
      }
    },
  ]
})